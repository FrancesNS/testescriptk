wait()

		local isGingerbreadExist = false

		if not isGingerbreadExist then

		

			local G = getgenv()

			G.config = {

				placeId = 8737899170,

				eventName = "Gingerbread", -- prob to change it to Comet or Coin Jar

				servers = {

					count = 100, -- 10, 25, 50, 100

					sort = "Desc", -- Desc, Asc

					pageDeep = math.random(2, 6), -- selected players page

				},

				delays = {

					beforeExecute = 0.3,

					beforeBreak = 1.5,

					afterBreak = 2.4,

					hit = 0.03,

					lootbag = 0.03,

					beforeTp = 2,

					whileError = 10,

				},

			}



			if not G.config then

				G.config = {

					placeId = 8737899170,

					eventName = "Gingerbread",

					servers = {

						count = 100,  -- 10, 25, 50, 100

						sort = "Asc", -- Desc, Asc

						pageDeep = math.random(2, 6), -- selected players page

					},

					delays = {

						beforeExecute = 0.3,

						beforeBreak = 1.5,

						afterBreak = 2.4,

						hit = 0.03,

						lootbag = 0.03,

						beforeTp = 2,

						whileError = 10,

					},

				}

			end



			repeat

				task.wait()

			until game.PlaceId ~= nil



			if not game:IsLoaded() then

				game.Loaded:Wait()

			end



			local ReplicatedStorage = game:GetService("ReplicatedStorage")

			local HttpService = game:GetService("HttpService")

			local Players = game:GetService("Players")

			local TeleportService = game:GetService("TeleportService")



			task.wait(G.config.delays.beforeExecute)



			if game.PlaceId ~= G.config.placeId then

				print("Gingerbread hunter unloaded, unknown place.")

				return

			end



			local Library = require(ReplicatedStorage:WaitForChild("Library", 2000))



			if not Library.Loaded then

				repeat

					task.wait()

				until Library.Loaded ~= false

			end



			local RandomEventCmds = Library.RandomEventCmds

			local LocalPlayer = Players.LocalPlayer

			local Character = LocalPlayer.Character

			local Humanoid = Character:WaitForChild("Humanoid", 1000)

			local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 1000)



			print(HttpService:JSONEncode(G.config))



			function tpToPos(cframe)

				HumanoidRootPart.CFrame = CFrame.new(cframe)

			end





			local activeEvents = RandomEventCmds.GetActive() or RandomEventCmds.GetActive()

		

			task.wait(G.config.delays.beforeExecute)



			for eventId, event in activeEvents do

				if event.name == G.config.eventName then

					isGingerbreadExist = true

					tpToPos(event.origin + Vector3.new(0, 18, 0))

				end

			end



			Library.Things:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)

				task.wait()

				if lootbag then

					game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack({ [1] = { [1] = lootbag.Name, }, }))

				end

			end)



			function CollectAllLootbags()

				pcall(function()

					for _, lootbag in pairs(Library.Things:FindFirstChild("Lootbags"):GetChildren()) do

						if lootbag and not lootbag:GetAttribute("Collected") then

							game:GetService("ReplicatedStorage")

								:WaitForChild("Network")

								:WaitForChild("Lootbags_Claim")

								:FireServer(unpack({ [1] = { [1] = lootbag.Name, }, }))

							task.wait(G.config.delays.lootbag)

						end

					end

				end)

			end



			function findGingerbread()

				for index, breakable in Library.Things.Breakables:GetChildren() do

					if breakable.ClassName == "Model" and breakable:GetAttribute("BreakableID") == G.config.eventName then

						return breakable

					end

				end

			end



			if isGingerbreadExist then

				Library.Alert.Message("Gingerbread exist!")

				task.wait(G.config.delays.beforeBreak)

				local findedGingerbread = nil



				for i = 1, 5, 1 do

					findedGingerbread = findGingerbread()



					if findedGingerbread then

						tpToPos(findedGingerbread.PrimaryPart.Position + Vector3.new(0, 18, 0))

						break

					else

						task.wait(0.5)

					end

				end



				if findedGingerbread then

					Library.Alert.Message("Start breaking!")



					while Library.Things.Breakables:FindFirstChild(findedGingerbread.Name) do

						local args = { [1] = findedGingerbread.Name, }

						game:GetService("ReplicatedStorage")

							:WaitForChild("Network")

							:WaitForChild("Breakables_PlayerDealDamage")

							:FireServer(unpack(args))

						task.wait(G.config.delays.hit)

					end



					Library.Alert.Message("Broke!")

					findedGingerbread = false

				end



				CollectAllLootbags()

				task.wait(G.config.delays.afterBreak)

				CollectAllLootbags()

				task.wait(G.config.delays.afterBreak)



			end

	end
